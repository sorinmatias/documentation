Source of documentation
  https://www.cyberciti.biz/tips/php-security-best-practices-tutorial.html
best practice
- install only modules that you really need or
  build it from source with desired modules
- disable php modules that you do  not use
    rm /etc/php.d/sqlite3.ini or
    mv /etc/php.d/sqlite3.ini /etc/php.d/sqlite3.disable
- 


things to look for  in php.ini

expose_php=Off
  When enabled, expose_php reports to the world that PHP is installed on the server, which includes the PHP version within the 
  HTTP header (e.g., X-Powered-By: PHP/5.3.3).When expose_php enabled you can see php version using the following command:
  curl -I https://www.example.biz/index.php
  
display_errors=Off
  Do not expose PHP error messages to all site visitors

log_errors=On
error_log=/var/log/httpd/php_scripts_error.log
  Make sure you log all php errors to a log file:

file_uploads=Off
  Disallow Uploading Files
  If it is not possible
upload_max_filesize – The maximum size of an uploaded file.
memory_limit – This sets the maximum amount of memory in bytes that a script is allowed to allocate. 
  This helps prevent poorly written scripts for eating up all available memory on a server. Note that to have no memory limit,
  set this directive to -1.
post_max_size – Sets max size of post data allowed. This setting also affects file upload. To upload large files, this 
  value must be larger than upload_max_filesize. If memory limit is enabled by your configure script, memory_limit also 
  affects file uploading. Generally speaking, memory_limit should be larger than post_max_size.
  There are two methods two fix this problem.The HTTP POST request method is used when the client (browser or user) 
  needs to send data to the Apache web server as part of the request, such as when uploading a file or submitting a 
  completed form. Attackers may attempt to send oversized POST requests to eat your system resources.
  example:
    
        memory_limit = 32M
        post_max_size = 11M
        upload_max_filesize = 10M
        post_max_size = 20M
        
allow_url_fopen=Off
allow_url_include=Off
  Turn Off Remote Code Execution
  The allow_url_fopen option allows PHP’s file functions – such as file_get_contents() and the include and require 
  statements – can retrieve data from remote locations using ftp or http protocols. Programmers frequently forget this 
  and don’t do proper input filtering when passing user-provided data to these functions, opening them up to code injection 
  vulnerabilities. A large number of code injection vulnerabilities reported in PHP-based web applications are caused by 
  the combination of enabling allow_url_fopen and bad input filtering
  
sql.safe_mode=On    !!! Wordpress may not work
magic_quotes_gpc=Off
  If turned On, mysql_connect() and mysql_pconnect() ignore any arguments passed to them. Please note that you may have 
  to make some changes to your code. Third party and open source application such as WordPress, and others may not work 
  at all when sql.safe_mode enabled. I also recommend that you turn off magic_quotes_gpc for all php 5.3.x installations 
  as the filtering by it is ineffective and not very robust. mysql_escape_string() and custom filtering functions serve a 
  better purpose
  
max_execution_time =  30 # set in seconds
max_input_time = 30  # set in seconds
memory_limit = 40M
  You can set maximum execution time of each php script, in seconds. Another recommend option is to set maximum amount of
  time each script may spend parsing request data, and maximum amount of memory a script may consume.

disable_functions = off 
or
disable_functions =exec,passthru,shell_exec,system,proc_open,popen,curl_exec,curl_multi_exec,parse_ini_file,show_source
  PHP has a lot of functions which can be used to crack your server if not used properly. 

cgi.force_redirect=On
  PHP work with FastCGI. Fascgi reduces the memory footprint of your web server, but still gives you the speed and power 
  of the entire PHP language. Typical *Apache+PHP-CGI/FastCGI* setup
  !!!mod_fastcgi is a cgi-module for Apache web server. It can connect to an external FASTCGI server. You need to make 
  sure php run as non-root user. If PHP executes as a root or UID under 100, it may access and/or manipulate system files. 
 
open_basedir="/var/www/html/"
  Limit PHP Access To File System
 
 
